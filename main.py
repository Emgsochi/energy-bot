import os
import logging

from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
from openai import OpenAI
from httpx import Client

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI()

# –Ø–≤–Ω–æ —Å–æ–∑–¥–∞–µ–º http-–∫–ª–∏–µ–Ω—Ç –±–µ–∑ –ø—Ä–æ–∫—Å–∏
http_client = Client(proxies=None)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI –∫–ª–∏–µ–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ http_client
client = OpenAI(
    api_key=os.getenv("OPENAI_API_KEY"),
    http_client=http_client
)

@app.get("/")
async def root():
    return {"status": "ok"}

@app.post("/wazzup/webhook")
async def wazzup_webhook(request: Request):
    try:
        data = await request.json()
        logging.info(f"üì© –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {data}")

        # –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        text = data.get("text", "–ü—Ä–∏–≤–µ—Ç! –†–∞—Å—Å–∫–∞–∂–∏, —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")

        # –í—ã–∑–æ–≤ OpenAI (GPT-3.5 –∏–ª–∏ GPT-4)
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∏."},
                {"role": "user", "content": text}
            ]
        )

        reply = response.choices[0].message.content.strip()
        logging.info(f"üí¨ –û—Ç–≤–µ—Ç: {reply}")
        return {"reply": reply}

    except Exception as e:
        logging.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        return JSONResponse(content={"error": str(e)}, status_code=500)
