from fastapi import FastAPI, Request
from pydantic import BaseModel
import logging
import json

app = FastAPI()
logging.basicConfig(level=logging.INFO)

class WazzupMessage(BaseModel):
    text: str
    chat_id: str
    name: str
    channel: str

@app.post("/wazzup/webhook")
async def wazzup_webhook(request: Request):
    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    headers = dict(request.headers)
    logging.info(f"üì¨ Headers: {headers}")

    # –ü–æ–ª—É—á–∞–µ–º –∏ –ª–æ–≥–∏—Ä—É–µ–º RAW —Ç–µ–ª–æ
    raw_body = await request.body()
    body_str = raw_body.decode("utf-8")
    logging.info(f"üì• RAW BODY: {body_str}")

    try:
        data = json.loads(body_str)
        logging.info(f"üì© PARSED JSON: {json.dumps(data, indent=2, ensure_ascii=False)}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
        required_fields = ["text", "chat_id", "name", "channel"]
        if not all(field in data for field in required_fields):
            logging.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: text, chat_id, name, channel")
            return {"message": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"}

        message = WazzupMessage(**data)

        # –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        logging.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.name} –≤ {message.channel}: {message.text}")

        return {"message": f"–ü—Ä–∏–Ω—è—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}"}

    except json.JSONDecodeError:
        logging.error("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON")
        return {"message": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON"}

    except Exception as e:
        logging.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return {"message": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}
