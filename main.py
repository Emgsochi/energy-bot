from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse
from openai import OpenAI
import os
import re
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
openai_client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google Sheets
CREDENTIALS_FILE = 'H:/RoboJulia/credentials.json'
SPREADSHEET_NAME = 'EnergyBD'
SHEET_NAME = '–ø—Ä–∞–π—Å'

scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, scope)
sheet_client = gspread.authorize(creds)
sheet = sheet_client.open(SPREADSHEET_NAME).worksheet(SHEET_NAME)
data = sheet.get_all_values()


# –°–∏–Ω–æ–Ω–∏–º—ã
SYNONYMS = {
    "–¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ": "4+4",
    "–¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è": "4+4",
    "–¥–≤—É—Ö—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ": "4+4",
    "–æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ": "4+0",
    "–æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω—è—è": "4+0",
    "–≤–∏–∑–∏—Ç–∫–∏": "–≤–∏–∑–∏—Ç–∫–∏",
    "–≤–∏–∑–∏—Ç–∫–∞": "–≤–∏–∑–∏—Ç–∫–∏",
    "90—Ö50": "90x50",
    "90x50": "90x50"
}


def extract_parameters(query: str) -> dict:
    query = query.lower()
    for word, replacement in SYNONYMS.items():
        query = query.replace(word, replacement)

    # –ö–æ–ª-–≤–æ
    quantity_match = re.search(r"\d+", query)
    quantity = int(quantity_match.group()) if quantity_match else None

    # –†–∞–∑–º–µ—Ä
    size_match = re.search(r"\d{2,4}[x—Ö*]\d{2,4}", query)
    size = size_match.group().replace("—Ö", "x").replace("*", "x") if size_match else None

    # –§–æ—Ä–º–∞—Ç
    format_match = re.search(r"\d\+\d|\d{1,2}\+\d{1,2}", query)
    format_value = format_match.group() if format_match else None

    # –ü—Ä–æ–¥—É–∫—Ç
    product = "–≤–∏–∑–∏—Ç–∫–∏" if "–≤–∏–∑–∏—Ç–∫–∏" in query else None

    return {
        "product": product,
        "format": format_value,
        "size": size,
        "quantity": quantity
    }


def find_price_row(params):
    for row in data[1:]:  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if (
            params["product"] and params["product"] in row[0].lower()
            and params["format"] and params["format"] in row[1]
            and params["size"] and params["size"] in row[2]
            and params["quantity"] and str(params["quantity"]) in row[3]
        ):
            return row
    return None


@app.post("/wazzup/webhook")
async def receive_webhook(request: Request):
    try:
        data = await request.json()
    except Exception:
        raise HTTPException(status_code=400, detail="Invalid JSON payload")

    if isinstance(data, list) and len(data) > 0:
        data = data[0]
    elif isinstance(data, dict):
        pass
    else:
        raise HTTPException(status_code=400, detail="Payload must be JSON object or array")

    text = data.get("text", "")
    contact_name = data.get("contact_name", "")
    print(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {contact_name}: {text}")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    params = extract_parameters(text)
    print(f"üß† –ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")

    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ü–µ–Ω—É
    price_row = find_price_row(params)
    if price_row:
        response_text = (
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å {params['quantity']} –≤–∏–∑–∏—Ç–æ–∫ {params['size']} {params['format']} ‚Äî {price_row[4]} ‚ÇΩ"
        )
    else:
        response_text = (
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ü–µ–Ω—É –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (—Ñ–æ—Ä–º–∞—Ç, —Ä–∞–∑–º–µ—Ä, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)."
        )

    # –ó–∞–ø—Ä–æ—Å –∫ ChatGPT –¥–ª—è –±–æ–ª–µ–µ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    gpt_response = openai_client.chat.completions.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞."},
            {"role": "user", "content": f"–ó–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞: {text}. –û—Ç–≤–µ—Ç –æ—Ç –±–∞–∑—ã: {response_text}"}
        ],
        temperature=0.7
    )

    final_reply = gpt_response.choices[0].message.content
    print("ü§ñ –û—Ç–≤–µ—Ç GPT:", final_reply)

    return JSONResponse(content={"status": "ok", "reply": final_reply})
