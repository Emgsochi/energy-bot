import logging
from fastapi import FastAPI, Request
import openpyxl
import re

app = FastAPI()
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∂–∞–µ–º Excel-—Ñ–∞–π–ª –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
wb = openpyxl.load_workbook("bot_energy.xlsx", data_only=True)
sheet = wb["–≤–∏–∑–∏—Ç–∫–∏ —Ü–∏—Ñ—Ä–∞"]

def parse_message(text):
    match = re.search(r"(\d+)\s+–≤–∏–∑–∏—Ç–∫[–∏–∞]\s+(\d+)[x—ÖX–•](\d+)\s+(–¥–≤—É—Ö|–æ–¥–Ω–æ)—Å—Ç–æ—Ä–æ–Ω–Ω", text, re.IGNORECASE)
    if match:
        qty = int(match.group(1))
        width = match.group(2)
        height = match.group(3)
        side = match.group(4).lower()
        format_str = f"{width}x{height}"
        side_str = "4+4" if side == "–¥–≤—É—Ö" else "4+0"
        return qty, format_str, side_str
    return None, None, None

def find_price(qty, format_str, side_str):
    for row in sheet.iter_rows(min_row=2, values_only=True):
        row_qty, row_format, row_side, price = row[:4]
        if (int(row_qty) == qty and row_format == format_str and row_side == side_str):
            return price
    return None

@app.get("/")
async def root():
    return {"message": "Energy Bot —Ä–∞–±–æ—Ç–∞–µ—Ç!"}

@app.post("/wazzup/webhook")
async def receive_message(request: Request):
    try:
        data = await request.json()
    except Exception as e:
        logging.error(f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON: {e}")
        return {"status": "error", "message": "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON"}

    logging.info(f"üì® –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {data}")

    text = data.get("text") or data.get("message") or ""
    qty, size, sides = parse_message(text)

    if qty and size and sides:
        price = find_price(qty, size, sides)
        if price:
            logging.info(f"‚úÖ –¶–µ–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞: {qty} –≤–∏–∑–∏—Ç–æ–∫ {size} {sides} = {price}‚ÇΩ")
        else:
            logging.warning(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø—Ä–∞–π—Å–µ: {qty} {size} {sides}")
    else:
        logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: {text}")

    return {"status": "ok"}
