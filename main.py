from fastapi import FastAPI, Request
import logging
import os
import openai
import gspread
import requests
import json
from oauth2client.service_account import ServiceAccountCredentials

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# ‚úÖ –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ Render
openai.api_key = os.getenv("OPENAI_API_KEY")
wazzup_token = os.getenv("WAZZUP_API_KEY")
sheet_id = os.getenv("GOOGLE_SHEET_ID")

# üìå JSON-–∫–ª—é—á –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
google_json_str = os.getenv("GOOGLE_CREDENTIALS_JSON")

# üß† –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Å—Ç—Ä–æ–∫–∏
creds_dict = json.loads(google_json_str)
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(credentials)
sheet = client.open_by_key(sheet_id).sheet1


# üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞
def find_product_info(text: str) -> str:
    rows = sheet.get_all_records()
    for row in rows:
        name = row.get("–ù–∞–∑–≤–∞–Ω–∏–µ", "").lower()
        qty = str(row.get("–ö–æ–ª-–≤–æ", "")).lower()
        format_ = row.get("–§–æ—Ä–º–∞—Ç", "").lower()
        if all(k in text.lower() for k in [name, qty, format_]):
            return f"{row['–ù–∞–∑–≤–∞–Ω–∏–µ']} {row['–ö–æ–ª-–≤–æ']} {row['–§–æ—Ä–º–∞—Ç']} ‚Äî {row['–¶–µ–Ω–∞']}‚ÇΩ"
    return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–∑–∏—Ü–∏—é, —É—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞."


# üì¨ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Wazzup API
def send_reply(chat_id: str, message: str) -> str:
    url = "https://api.wazzup24.com/v3/message"
    headers = {
        "Authorization": f"Bearer {wazzup_token}",
        "Content-Type": "application/json"
    }
    payload = {
        "chatId": chat_id,
        "text": message
    }
    response = requests.post(url, json=payload, headers=headers)
    logging.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Wazzup: {response.status_code} | {response.text}")
    return "sent" if response.status_code == 200 else f"error: {response.status_code}"


# üöÄ FastAPI
app = FastAPI()


@app.post("/wazzup/webhook")
async def wazzup_webhook(request: Request):
    try:
        data = await request.json()
        logging.info(f"üì© –ü–æ–ª—É—á–µ–Ω–æ: {data}")

        text = data.get("text")
        chat_id = data.get("chat_id")
        name = data.get("name", "–ì–æ—Å—Ç—å")

        if not all([text, chat_id]):
            logging.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
            return {"status": "missing_data"}

        # –ü–æ–∏—Å–∫ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
        match = find_product_info(text)
        prompt = f"–ö–ª–∏–µ–Ω—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: {text}\n–ù–∞–π–¥–µ–Ω–æ –≤ –ø—Ä–∞–π—Å–µ: {match}\n–û—Ç–≤–µ—Ç—å –ø–æ–Ω—è—Ç–Ω–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ."

        reply = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞, –æ—Ç–≤–µ—á–∞–π –ø–æ–Ω—è—Ç–Ω–æ, –∫–æ—Ä–æ—Ç–∫–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ."},
                {"role": "user", "content": prompt}
            ]
        ).choices[0].message.content.strip()

        logging.info(f"ü§ñ GPT –æ—Ç–≤–µ—Ç: {reply}")
        status = send_reply(chat_id, reply)

        return {"status": "ok", "sent": status, "reply": reply}

    except Exception as e:
        logging.error(f"üî• –û—à–∏–±–∫–∞: {e}")
        return {"status": "error", "detail": str(e)}
