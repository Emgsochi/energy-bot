from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse
import logging
import json

app = FastAPI()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

@app.post("/wazzup/webhook")
async def webhook(request: Request):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        raw_body = await request.body()
        logging.info(f"üì© RAW body: {raw_body.decode('utf-8')}")

        data = await request.json()
        logging.info(f"‚úÖ Parsed JSON: {json.dumps(data, ensure_ascii=False)}")

        # –ï—Å–ª–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ ‚Äî –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
        if isinstance(data, list):
            if not data:
                logging.warning("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
                return JSONResponse({"message": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}, status_code=200)
            data = data[0]

        if not isinstance(data, dict):
            logging.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö (–Ω–µ dict)")
            return JSONResponse({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö"}, status_code=400)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ["text", "chat_id", "channel"]
        missing = [field for field in required_fields if not data.get(field)]

        if missing:
            logging.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing}")
            return JSONResponse({"error": f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {', '.join(missing)}"}, status_code=400)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        text = data.get("text")
        chat_id = data.get("chat_id")
        channel = data.get("channel")
        name = data.get("name", "–ì–æ—Å—Ç—å")

        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        reply = f"{name}, –≤–∞—à –∑–∞–ø—Ä–æ—Å ¬´{text}¬ª –ø–æ–ª—É—á–µ–Ω! –ú—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ —Ä–∞—Å—á—ë—Ç üßÆ"

        logging.info(f"üì§ –û—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É: {reply}")
        return JSONResponse({"reply": reply})

    except Exception as e:
        logging.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        return JSONResponse({"error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}, status_code=500)
