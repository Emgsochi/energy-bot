from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse
import openai
import os
from extract_parameters import extract_parameters

app = FastAPI()

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º API-–∫–ª—é—á OpenAI –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
openai.api_key = os.getenv("OPENAI_API_KEY")

@app.post("/wazzup/webhook")
async def receive_webhook(request: Request):
    try:
        payload = await request.json()
    except Exception:
        raise HTTPException(status_code=400, detail="Invalid JSON payload")

    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    if payload is None or payload == "":
        data = {}
    elif isinstance(payload, list):
        data = payload[0] if len(payload) > 0 else {}
    elif isinstance(payload, dict):
        data = payload
    else:
        raise HTTPException(status_code=400, detail="Payload must be JSON object or array")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    text = data.get("text", "")
    contact_name = data.get("contact_name", "")
    contact_id = data.get("contact_id", "")

    print(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {contact_name}: {text}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–∫–æ–ª-–≤–æ, —Ñ–æ—Ä–º–∞—Ç, —Ä–∞–∑–º–µ—Ä, –ø—Ä–æ–¥—É–∫—Ç)
    extracted = extract_parameters(text)
    print("üß† –ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:", extracted)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏ –∑–∞–ø—Ä–æ—Å –¥–ª—è GPT
    system_prompt = (
        "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ –≠–Ω–µ—Ä–¥–∂–∏ –≤ –°–æ—á–∏. "
        "–¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –∫–ª–∏–µ–Ω—Ç–∞–º –ø–æ—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –∏ –æ–±—ä—è—Å–Ω—è–µ—à—å, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ."
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    user_prompt = (
        f"–ö–ª–∏–µ–Ω—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: {text}\n\n"
        f"–í —Å–æ–æ–±—â–µ–Ω–∏–∏ —è –Ω–∞—à—ë–ª —Ç–∞–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
        f"- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {extracted.get('quantity') or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"- –†–∞–∑–º–µ—Ä: {extracted.get('size') or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"- –§–æ—Ä–º–∞—Ç: {extracted.get('format') or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"- –ü—Ä–æ–¥—É–∫—Ç: {extracted.get('product') or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        "–û—Ç–≤–µ—Ç—å —Ç–∞–∫, –∫–∞–∫ –µ—Å–ª–∏ –±—ã —Ç—ã –±—ã–ª –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞: –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –±–µ–∑ –ª–∏—à–Ω–µ–π –≤–æ–¥—ã, –∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî —É—Ç–æ—á–Ω–∏."
    )

    # –ó–∞–ø—Ä–æ—Å –∫ GPT
    gpt_response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt}
        ]
    )

    reply = gpt_response.choices[0].message.content.strip()
    print("ü§ñ –û—Ç–≤–µ—Ç GPT:", reply)

    # –û—Ç–≤–µ—Ç –¥–ª—è Albato (—á—Ç–æ–±—ã –ø–µ—Ä–µ—Å–ª–∞—Ç—å –µ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ –≤ Telegram —á–µ—Ä–µ–∑ webhook)
    return JSONResponse(content={
        "text": reply,
        "contact_id": contact_id,
        "contact_name": contact_name
    })
