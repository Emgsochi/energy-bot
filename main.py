from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
import logging
import os
from openai import OpenAI
import httpx

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI –∏ OpenAI-–∫–ª–∏–µ–Ω—Ç–∞
app = FastAPI()
client = OpenAI()  # SDK —Å–∞–º –ø–æ–¥—Ç—è–Ω–µ—Ç OPENAI_API_KEY –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è

@app.post("/wazzup/webhook")
async def wazzup_webhook(request: Request):
    try:
        # –ü–æ–ª—É—á–∞–µ–º JSON –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        data = await request.json()
        logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {data}")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = data.get("text", "").strip()

        if not message_text:
            return JSONResponse({"error": "–°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ"}, status_code=400)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ GPT
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∏, –æ—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."},
                {"role": "user", "content": message_text}
            ]
        )
        gpt_response = response.choices[0].message.content.strip()
        logger.info(f"ü§ñ –û—Ç–≤–µ—Ç GPT: {gpt_response}")

        # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
        chat_id = data.get("chatId") or os.getenv("DEFAULT_CHAT_ID")
        channel_id = data.get("channelId") or os.getenv("DEFAULT_CHANNEL_ID")

        if not chat_id or not channel_id:
            logger.warning("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å chat_id –∏–ª–∏ channel_id")
            return JSONResponse({"error": "–ù–µ—Ç chat_id –∏–ª–∏ channel_id"}, status_code=400)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ Wazzup
        async with httpx.AsyncClient() as http_client:
            result = await http_client.post(
                url="https://api.wazzup24.com/v3/message",
                headers={
                    "Authorization": f"Bearer {os.getenv('WAZZUP_API_KEY')}",
                    "Content-Type": "application/json"
                },
                json={
                    "chatId": chat_id,
                    "channelId": channel_id,
                    "text": gpt_response
                }
            )
            logger.info(f"üì§ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Wazzup: {result.status_code}, {result.text}")

        return {"status": "ok", "reply": gpt_response}

    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
        return JSONResponse({"error": str(e)}, status_code=500)
