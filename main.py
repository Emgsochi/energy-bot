import os
import logging
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
from openai import AsyncOpenAI

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI (–±–µ—Ä—ë—Ç –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è)
client = AsyncOpenAI()  # –ù–∏–∫–∞–∫–∏—Ö proxies –∏ api_key –Ω–µ –ø–µ—Ä–µ–¥–∞—ë–º –≤—Ä—É—á–Ω—É—é

@app.post("/wazzup/webhook")
async def webhook(request: Request):
    try:
        data = await request.json()
        logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {data}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Å–ø–∏—Å–∫–∞ –æ—Ç Albato
        if isinstance(data, list):
            if not data:
                return JSONResponse({"message": "–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å"}, status_code=200)
            data = data[0]

        text = data.get("text", "")
        chat_id = data.get("chatId", "")
        messenger = data.get("messenger", "")
        from_name = data.get("fromName", "–ö–ª–∏–µ–Ω—Ç")

        if not text:
            return JSONResponse({"message": "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"}, status_code=200)

        # –ó–∞–ø—Ä–æ—Å –∫ OpenAI
        response = await client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –≤–µ–∂–ª–∏–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ –≠–Ω–µ—Ä–¥–∂–∏."},
                {"role": "user", "content": text}
            ]
        )

        ai_reply = response.choices[0].message.content.strip()
        logger.info(f"ü§ñ –û—Ç–≤–µ—Ç GPT: {ai_reply}")

        return JSONResponse({"reply": ai_reply}, status_code=200)

    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
        return JSONResponse({"error": str(e)}, status_code=500)


# –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞ Render)
if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=10000)
