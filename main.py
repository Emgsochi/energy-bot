import logging
import openai
import os
from fastapi import FastAPI, Request
import openpyxl
import re

openai.api_key = os.getenv("OPENAI_API_KEY")

app = FastAPI()
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∂–∞–µ–º Excel-—Ñ–∞–π–ª
wb = openpyxl.load_workbook("bot_energy.xlsx", data_only=True)
sheet = wb["–≤–∏–∑–∏—Ç–∫–∏ —Ü–∏—Ñ—Ä–∞"]

def parse_message(text):
    match = re.search(r"(\d+)\s+–≤–∏–∑–∏—Ç–∫[–∏–∞]\s+(\d+)[x—ÖX–•](\d+)\s+(–¥–≤—É—Ö|–æ–¥–Ω–æ)—Å—Ç–æ—Ä–æ–Ω–Ω", text, re.IGNORECASE)
    if match:
        qty = int(match.group(1))
        width = match.group(2)
        height = match.group(3)
        side = match.group(4).lower()
        format_str = f"{width}x{height}"
        side_str = "4+4" if side == "–¥–≤—É—Ö" else "4+0"
        return qty, format_str, side_str
    return None, None, None

def find_price(qty, format_str, side_str):
    for row in sheet.iter_rows(min_row=2, values_only=True):
        row_qty, row_format, row_side, price = row[:4]
        if (int(row_qty) == qty and row_format == format_str and row_side == side_str):
            return price
    return None

def generate_answer(text, price_info=None):
    prompt_base = """
–¢—ã ‚Äî –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ "–≠–Ω–µ—Ä–¥–∂–∏" –∏–∑ –°–æ—á–∏. –û—Ç–≤–µ—á–∞–π –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫: –∂–∏–≤–æ, –ø–æ–Ω—è—Ç–Ω–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ. –ü—Ä–µ–¥–ª–∞–≥–∞–π –ø–æ–º–æ—â—å, —É—Ç–æ—á–Ω—è–π –¥–µ—Ç–∞–ª–∏ –∏ –≤–µ–¥–∏ –¥–∏–∞–ª–æ–≥, –∫–∞–∫ –µ—Å–ª–∏ –±—ã —Ç—ã –ø–∏—Å–∞–ª –∫–ª–∏–µ–Ω—Ç—É —Å–∞–º. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º.
"""
    if price_info:
        prompt = prompt_base + f"\n–ö–ª–∏–µ–Ω—Ç —Å–ø—Ä–æ—Å–∏–ª: '{text}'\n–ù–∞–π–¥–µ–Ω–æ –≤ –ø—Ä–∞–π—Å–µ: {price_info}\n–û—Ç–≤–µ—Ç—å –∫–ª–∏–µ–Ω—Ç—É, –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä."
    else:
        prompt = prompt_base + f"\n–ö–ª–∏–µ–Ω—Ç –Ω–∞–ø–∏—Å–∞–ª: '{text}'\n–û—Ç–≤–µ—Ç—å, –∑–∞–¥–∞–≤–∞—è —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ."

    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[{ "role": "user", "content": prompt }]
    )
    return response['choices'][0]['message']['content']

@app.post("/wazzup/webhook")
async def receive_message(request: Request):
    data = await request.json()
    text = data.get("text") or data.get("message") or ""

    qty, size, sides = parse_message(text)
    if qty and size and sides:
        price = find_price(qty, size, sides)
        price_info = f"{qty} –≤–∏–∑–∏—Ç–æ–∫ {size} {sides} ‚Äî {price}‚ÇΩ" if price else None
    else:
        price_info = None

    reply = generate_answer(text, price_info)

    logging.info(f"üì® –ö–ª–∏–µ–Ω—Ç: {text}")
    logging.info(f"ü§ñ –û—Ç–≤–µ—Ç: {reply}")

    return {"reply": reply}
