import logging
from fastapi import FastAPI, Request
import openai
import os

app = FastAPI()
logging.basicConfig(level=logging.INFO)

openai.api_key = os.getenv("OPENAI_API_KEY")

PROMPT_TEMPLATE = """
–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ ¬´–≠–Ω–µ—Ä–¥–∂–∏ –°–æ—á–∏¬ª. –ê–≥–µ–Ω—Ç—Å—Ç–≤–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –°–æ—á–∏, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ digital-—Ä–µ–∫–ª–∞–º–µ –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏—è—Ö.

–¢–≤–æ–π —Å—Ç–∏–ª—å: —É–≤–µ—Ä–µ–Ω–Ω—ã–π, –∫–ª–∏–µ–Ω—Ç–æ–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π. –ù–µ —à–∞–±–ª–æ–Ω–Ω—ã–π. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫—É, –º–µ—Ç–∞—Ñ–æ—Ä—ã, –ø—Ä–∏–º–µ—Ä—ã. –í—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–π —Ä–µ—à–µ–Ω–∏–µ –∏ –∑–æ–≤–∏ –∫ –¥–µ–π—Å—Ç–≤–∏—é. –û—Ç–≤–µ—á–∞–π —Ç–∞–∫, –∫–∞–∫ –±—É–¥—Ç–æ —Ç—ã –∂–∏–≤–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞.

–í–æ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:
"{message}"

–û—Ç–≤–µ—Ç—å –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫, –≤ —Å—Ç–∏–ª–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ Energy.
"""

@app.post("/wazzup/webhook")
async def handle_message(request: Request):
    data = await request.json()
    message = data.get("text") or data.get("message") or ""
    
    if not message:
        logging.warning("–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return {"status": "no message"}

    prompt = PROMPT_TEMPLATE.format(message=message)

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}]
        )
        reply = response.choices[0].message.content.strip()
        logging.info(f"üí¨ –û—Ç–≤–µ—Ç: {reply}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ GPT: {e}")
        reply = "–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, —Å–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å. –í–µ—Ä–Ω—É—Å—å —Å –æ—Ç–≤–µ—Ç–æ–º —á—É—Ç—å –ø–æ–∑–∂–µ!"

    return {"reply": reply}
