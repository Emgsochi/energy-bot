import os
import logging
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse

# –í–∞–∂–Ω–æ! –ò–º–ø–æ—Ä—Ç –∏–∑ httpx
import httpx  
from openai import OpenAI

logging.basicConfig(level=logging.INFO)
app = FastAPI()

# –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º httpx-–∫–ª–∏–µ–Ω—Ç
http_client = httpx.Client()  # proxies –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"), http_client=http_client)

@app.get("/")
def root():
    return {"message": "OK"}

@app.post("/wazzup/webhook")
async def wazzup_webhook(request: Request):
    try:
        data = await request.json()
        logging.info(f"üì© –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {data}")

        prompt = data.get("text", "–†–∞—Å—Å–∫–∞–∂–∏, —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")

        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∏"},
                {"role": "user", "content": prompt}
            ]
        )

        reply = response.choices[0].message.content.strip()
        return {"reply": reply}

    except Exception as e:
        logging.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        return JSONResponse(content={"error": str(e)}, status_code=500)
