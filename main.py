
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse
import logging
import os
import json
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import openai

app = FastAPI()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_dict(
    json.loads(os.getenv("GOOGLE_CREDENTIALS_JSON")),
    scope
)
client = gspread.authorize(creds)
sheet = client.open_by_key(os.getenv("GOOGLE_SHEET_ID")).sheet1

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI
openai.api_key = os.getenv("OPENAI_API_KEY")

@app.post("/wazzup/webhook")
async def webhook(request: Request):
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data = await request.json()
        logging.info(f"üì© –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {data}")

        if isinstance(data, list):
            if not data:
                return JSONResponse({"message": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}, 200)
            message = data[0]
        else:
            message = data

        # 2. –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —á–µ—Ä–µ–∑ GPT
        user_text = message.get("text", "")
        if not user_text:
            return await ask_for_clarification(message, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞")

        gpt_response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "system",
                    "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∏. –ò–∑–≤–ª–µ–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è: —Ç–∏—Ä–∞–∂, —Ñ–æ—Ä–º–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä 90x50), —Ü–≤–µ—Ç–Ω–æ—Å—Ç—å (4+4, 4+0), –±—É–º–∞–≥—É, –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫—É. –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ JSON."
                },
                {"role": "user", "content": user_text}
            ]
        )

        params = json.loads(gpt_response.choices[0].message.content)
        logging.info(f"üîç –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")

        # 3. –ü–æ–∏—Å–∫ –≤ –ø—Ä–∞–π—Å–µ
        price_info = find_in_price(params)
        if not price_info:
            return await offer_alternatives(params, message)

        # 4. –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_text = (
            f"‚úÖ {params.get('—Ç–∏—Ä–∞–∂', '')} –≤–∏–∑–∏—Ç–æ–∫ {params.get('—Ñ–æ—Ä–º–∞—Ç', '')} "
            f"{params.get('—Ü–≤–µ—Ç–Ω–æ—Å—Ç—å', '')} ‚Äî {price_info['price']} ‚ÇΩ.\n"
            "–í—Å—ë –≤–µ—Ä–Ω–æ? –ù–∞–ø–∏—à–∏—Ç–µ ¬´–¥–∞¬ª –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç–µ –¥–µ—Ç–∞–ª–∏."
        )

        return JSONResponse({"reply": response_text})

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        return JSONResponse({"error": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"}, 500)

async def ask_for_clarification(message: dict, reason: str):
    username = message.get("fromName") or message.get("name") or "–ö–ª–∏–µ–Ω—Ç"
    response = (
        f"ü§î {username}, {reason}.\n"
        "–£—Ç–æ—á–Ω–∏—Ç–µ:\n"
        "- –¢–∏—Ä–∞–∂ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 300 —à—Ç)\n"
        "- –§–æ—Ä–º–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 90x50 –º–º)\n"
        "- –¶–≤–µ—Ç–Ω–æ—Å—Ç—å (4+4 –∏–ª–∏ 4+0)"
    )
    return JSONResponse({"reply": response})

def find_in_price(params: dict) -> dict:
    try:
        records = sheet.get_all_records()
        for row in records:
            if (str(row.get('—Ç–∏—Ä–∞–∂')) == str(params.get('—Ç–∏—Ä–∞–∂')) and
                row.get('—Ñ–æ—Ä–º–∞—Ç') == params.get('—Ñ–æ—Ä–º–∞—Ç') and
                row.get('—Ü–≤–µ—Ç–Ω–æ—Å—Ç—å') == params.get('—Ü–≤–µ—Ç–Ω–æ—Å—Ç—å')):
                return {"price": row['—Ü–µ–Ω–∞'], "params": row}
        return {}
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –ø—Ä–∞–π—Å–µ: {e}")
        return {}

async def offer_alternatives(params: dict, message: dict):
    alternatives = find_close_matches(params)
    if alternatives:
        options = "\n".join([f"- {alt['—Ç–∏—Ä–∞–∂']} —à—Ç, {alt['—Ñ–æ—Ä–º–∞—Ç']}, {alt['—Ü–≤–µ—Ç–Ω–æ—Å—Ç—å']} ‚Äî {alt['—Ü–µ–Ω–∞']} ‚ÇΩ" 
                              for alt in alternatives])
        response = (
            f"üí° –ú—ã –Ω–µ –Ω–∞—à–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –Ω–æ –µ—Å—Ç—å –ø–æ—Ö–æ–∂–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n{options}\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã."
        )
    else:
        response = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ –º–æ–∂–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–∞–∫–æ–π –∑–∞–∫–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã."

    return JSONResponse({"reply": response})

def find_close_matches(params: dict) -> list:
    return []  # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å fuzzy-–ø–æ–∏—Å–∫

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=int(os.getenv("PORT", 10000)))
