from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
from openai import OpenAI
import logging

app = FastAPI()

# –í openai==1.9.0 –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –±–µ–∑ api_key –∏ proxies
client = OpenAI()

logging.basicConfig(level=logging.INFO)

@app.post("/wazzup/webhook")
async def webhook(request: Request):
    try:
        data = await request.json()
        logging.info(f"üì© –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {data}")

        if isinstance(data, list):
            if not data:
                return JSONResponse({"message": "–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫"}, status_code=200)
            data = data[0]

        text = data.get("text", "")
        name = data.get("fromName", "–ö–ª–∏–µ–Ω—Ç")

        if not text:
            return JSONResponse({"message": "–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç"}, status_code=200)

        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫."},
                {"role": "user", "content": text}
            ]
        )

        reply = response.choices[0].message.content.strip()
        return JSONResponse({"reply": f"{name}, –æ—Ç–≤–µ—Ç: {reply}"})

    except Exception as e:
        logging.exception("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
        return JSONResponse({"error": str(e)}, status_code=500)

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=10000)
